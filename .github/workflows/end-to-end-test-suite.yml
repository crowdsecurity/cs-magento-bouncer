name: End-to-end tests
on:
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
  workflow_dispatch:

permissions:
  contents: read

jobs:
  end-to-end-test-suite:
    strategy:
      fail-fast: false
      matrix:
        # Last 2 patches for the current minor, and last one for the previous minor, greatest php version
        m2-version: [ "2.3.7", "2.4.4", "2.4.5" ]
        php-version: [ "7.4", "8.1" ]
        exclude:
          - { php-version: "8.1", m2-version: "2.3.7" }
          - { php-version: "7.4", m2-version: "2.4.4" }
          - { php-version: "7.4", m2-version: "2.4.5" }

    name: End-to-end test suite
    if: ${{ !contains(github.event.head_commit.message, 'chore(') }}
    runs-on: ubuntu-latest
    env:
      EXTENSION_PACKAGE_NAME: "crowdsec/magento2-module-bouncer"
      EXTENSION_NAME: "CrowdSec_Bouncer"
      EXTENSION_PATH: "crowdsec-bouncer"

    steps:

      - name: Install Magento 2 with DDEV
        uses: julienloizelet/github-actions-magento2-ddev-installation@v1.2.0
        with:
          php_version: ${{ matrix.php-version }}
          magento_version: ${{ matrix.m2-version }}
          composer_auth: ${{ secrets.M2_COMPOSER_AUTH }}
          magento_repository: "https://repo.magento.com/"
          ddev_repository_ref: master

      - name: Add Crowdsec and Playwright to DDEV
        run: |
          cp .ddev/additional_docker_compose/docker-compose.playwright-alone.yaml .ddev/docker-compose.playwright.yaml
          cp .ddev/additional_docker_compose/docker-compose.crowdsec.yaml .ddev/docker-compose.crowdsec.yaml
          cp .ddev/custom_files/varnish-profile.xml varnish-profile.xml
          mkdir ${{ github.workspace }}/cfssl
          cp -r .ddev/custom_files/crowdsec/cfssl/* ${{ github.workspace }}/cfssl
          ddev restart

      - name: Clone M2 ${{ env.EXTENSION_NAME }} files
        uses: actions/checkout@v2
        with:
          path: my-own-modules/${{ env.EXTENSION_PATH }}

      - name: Validate composer.json
        run: ddev composer validate --working-dir ./my-own-modules/${{ env.EXTENSION_PATH }}

      - name: Prepare composer repositories
        run: |
          ddev composer config --unset repositories.0
          ddev composer config repositories.0 '{"type": "path", "url":"my-own-modules/${{ env.EXTENSION_PATH }}/",  "canonical": true}'
          ddev composer config repositories.1 '{"type": "composer", "url":"https://repo.magento.com/",  "exclude": ["${{ env.EXTENSION_PACKAGE_NAME }}"]}'
          cat composer.json

      - name: Add ${{ env.EXTENSION_NAME }} as composer dependency
        run: |
          ddev composer require ${{ env.EXTENSION_PACKAGE_NAME }}:@dev --no-interaction

      - name: Disable some extensions for 2.4
        if: startsWith(matrix.m2-version, '2.4')
        run: |
          ddev magento module:disable Magento_TwoFactorAuth
          ddev magento module:disable Magento_AdminNotification

      - name: Make some workaround for 2.3.5
        if: startsWith(matrix.m2-version, '2.3.5')
        run: |
          ddev magento  module:disable Dotdigitalgroup_Chat
          ddev magento  module:disable Dotdigitalgroup_Email

      - name: Enable extension
        run: |
          ddev magento deploy:mode:set developer
          ddev magento module:enable ${{ env.EXTENSION_NAME }}
          ddev magento setup:upgrade
          ddev magento setup:static-content:deploy -f
          ddev crowdsec-config
          ddev magento cache:flush

      - name: Prepare for playwright test
        run: |
          ddev magento setup:performance:generate-fixtures ./varnish-profile.xml
          ddev magento cache:flush
          cd ${{ github.workspace }}
          mkdir var/crowdsec
          ddev maxmind-download DEFAULT GeoLite2-City /var/www/html/var/crowdsec
          ddev maxmind-download DEFAULT GeoLite2-Country /var/www/html/var/crowdsec
          cd var/crowdsec
          sha256sum -c GeoLite2-Country.tar.gz.sha256.txt
          sha256sum -c GeoLite2-City.tar.gz.sha256.txt
          tar -xf GeoLite2-Country.tar.gz
          tar -xf GeoLite2-City.tar.gz
          rm GeoLite2-Country.tar.gz GeoLite2-Country.tar.gz.sha256.txt GeoLite2-City.tar.gz GeoLite2-City.tar.gz.sha256.txt
          cd ${{ github.workspace }}
          cp .ddev/custom_scripts/cronLaunch.php ${{ github.workspace }}/pub/cronLaunch.php
          cd ${{ github.workspace }}/my-own-modules/${{ env.EXTENSION_PATH }}/Test/EndToEnd/__scripts__
          chmod +x test-init.sh
          ./test-init.sh
          chmod +x run-tests.sh

      - name: Run config test
        run: |
          cd ${{ github.workspace }}/my-own-modules/${{ env.EXTENSION_PATH }}/Test/EndToEnd/__scripts__
          ./run-tests.sh ci "./__tests__/1-config.js"

      - name: Run live mode test
        run: |
          cd ${{ github.workspace }}/my-own-modules/${{ env.EXTENSION_PATH }}/Test/EndToEnd/__scripts__
          ./run-tests.sh ci "./__tests__/2-live-mode.js"
                    cd ${{ github.workspace }}/my-own-modules/${{ env.EXTENSION_PATH }}/Test/EndToEnd/
          PENDING_TESTS=$(grep -oP '"numPendingTests":\K(.*),"numRuntimeErrorTestSuites"' .test-results.json | sed  's/,"numRuntimeErrorTestSuites"//g')
          if [[ $PENDING_TESTS == "0" ]]
          then
              echo "No pending tests: OK"
          else
              echo "There are pending tests: $PENDING_TESTS (KO°"
              exit 1
          fi

      - name: Run stream mode test
        run: |
          cd ${{ github.workspace }}/my-own-modules/${{ env.EXTENSION_PATH }}/Test/EndToEnd/__scripts__
          ./run-tests.sh ci "./__tests__/3-stream-mode.js"
          cd ${{ github.workspace }}/my-own-modules/${{ env.EXTENSION_PATH }}/Test/EndToEnd/
          PENDING_TESTS=$(grep -oP '"numPendingTests":\K(.*),"numRuntimeErrorTestSuites"' .test-results.json | sed  's/,"numRuntimeErrorTestSuites"//g')
          if [[ $PENDING_TESTS == "0" ]]
          then
              echo "No pending tests: OK"
          else
              echo "There are pending tests: $PENDING_TESTS (KO°"
              exit 1
          fi

      - name: Run cron test
        run: |
          cd ${{ github.workspace }}/my-own-modules/${{ env.EXTENSION_PATH }}/Test/EndToEnd/__scripts__
          ./run-tests.sh ci "./__tests__/4-cron.js"

      - name: Run api tests
        run: |
          cd ${{ github.workspace }}/my-own-modules/${{ env.EXTENSION_PATH }}/Test/EndToEnd/__scripts__
          ./run-tests.sh ci "./__tests__/5-api.js"

      - name: Run events logging test
        run: |
          ddev magento config:set admin/captcha/enable 0
          cd ${{ github.workspace }}/my-own-modules/${{ env.EXTENSION_PATH }}/Test/EndToEnd/__scripts__
          ./run-tests.sh ci "./__tests__/6-events.js"

      - name: Run geolocation test
        run: |
          cd ${{ github.workspace }}/my-own-modules/${{ env.EXTENSION_PATH }}/Test/EndToEnd/__scripts__
          ./run-tests.sh ci "./__tests__/7-geolocation.js"
