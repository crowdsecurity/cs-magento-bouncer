name: End-to-end test suite
on:
  pull_request:
    branches:
      - main
    paths-ignore:
      - '**.md'
  workflow_dispatch:

jobs:
  end-to-end-test-suite:
    strategy:
      fail-fast: false
      matrix:
        m2-version: [ "2.3.5", "2.4.3" ]
        php-version: ["7.2", "7.3", "7.4"]
        exclude:
          - { php-version: "7.3", m2-version: "2.3.5" }
          - { php-version: "7.4", m2-version: "2.3.5" }
          - { php-version: "7.2", m2-version: "2.4.3" }

    name: End-to-end test suite
    if: ${{ !contains(github.event.head_commit.message, 'chore(') }}
    runs-on: ubuntu-latest
    env:
      EXTENSION_PACKAGE_NAME: "crowdsec/magento2-module-bouncer"
      EXTENSION_NAME: "CrowdSec_Bouncer"
      EXTENSION_PATH: "crowdsec-bouncer"

    steps:

      - name: Clone DDEV files
        uses: actions/checkout@v2
        with:
          path: .ddev
          repository: julienloizelet/ddev-m2

      - name: Install DDEV
        env:
          DDEV_VERSION: v1.19.1
        run: |
          # @see https://ddev.readthedocs.io/en/stable/#installationupgrade-script-linux-and-macos-armarm64-and-amd64-architectures
          sudo apt-get -qq update
          sudo apt-get -qq -y install libnss3-tools
          curl -LO https://raw.githubusercontent.com/drud/ddev/master/scripts/install_ddev.sh
          bash install_ddev.sh ${{env.DDEV_VERSION}}
          ddev config global --instrumentation-opt-in=false --omit-containers=dba,ddev-ssh-agent
          rm install_ddev.sh

      - name: Set M2_VERSION_CODE env
        # used in some directory path and conventional file naming
        # Example : 2.4.3 => m243
        run: |
           echo "M2_VERSION_CODE=$(echo m${{ matrix.m2-version }} | sed 's/\.//g' )" >> $GITHUB_ENV

      - name: Set ELASTIC_INSTALL_STRING env for 2.4
        if: startsWith(matrix.m2-version, '2.4')
        run: echo "ELASTIC_INSTALL_STRING='--elasticsearch-host=elasticsearch'" >> $GITHUB_ENV

      - name: Start DDEV for ${{ matrix.m2-version }} with PHP ${{ matrix.php-version }}
        run: |
          cp .ddev/config_overrides/config.${{ env.M2_VERSION_CODE }}.yaml .ddev/config.${{ env.M2_VERSION_CODE }}.yaml
          cp .ddev/additional_docker_compose/docker-compose.crowdsec.yaml .ddev/docker-compose.crowdsec.yaml
          cp .ddev/additional_docker_compose/docker-compose.playwright.yaml .ddev/docker-compose.playwright.yaml
          cp .ddev/custom_files/varnish-profile.xml varnish-profile.xml
          sed -i -e 's/^php_version:.*/php_version: ${{ matrix.php-version }}/g' .ddev/config.${{ env.M2_VERSION_CODE }}.yaml
          ddev start

      - name: Install Magento ${{ matrix.m2-version }} with PHP ${{ matrix.php-version }}
        # We don't use "ddev composer" create as it restarts all containers
        run: |
          ddev composer config --global http-basic.repo.magento.com ${{ secrets.MAGENTO_MARKETPLACE_USERNAME }} ${{ secrets.MAGENTO_MARKETPLACE_PASSWORD }}
          ddev exec composer create --repository=https://repo.magento.com/ magento/project-community-edition ${{ env.M2_VERSION_CODE }} ${{ matrix.m2-version }}
          cp -r ${{ env.M2_VERSION_CODE }}/. ${{ github.workspace }}
          rm -rf ${{ env.M2_VERSION_CODE }}

      - name: Setup Magento ${{ matrix.m2-version }} with PHP ${{ matrix.php-version }}
        run: |
          ddev magento setup:install \
                           --base-url=https://${{ env.M2_VERSION_CODE }}.ddev.site/ \
                           --db-host=db \
                           --db-name=db \
                           --db-user=db \
                           --db-password=db \
                           --backend-frontname=admin \
                           --admin-firstname=admin \
                           --admin-lastname=admin \
                           --admin-email=admin@admin.com \
                           --admin-user=admin \
                           --admin-password=admin123 \
                           --language=en_US \
                           --currency=USD \
                           --timezone=America/Chicago \
                           --use-rewrites=1 \
                           ${{ env.ELASTIC_INSTALL_STRING }}

      - name: Clone M2 ${{ env.EXTENSION_NAME }} files
        uses: actions/checkout@v2
        with:
          path: my-own-modules/${{ env.EXTENSION_PATH }}

      - name: Add ${{ env.EXTENSION_NAME }} as composer dependency
        run: |
          ddev composer config repositories.crowdsec-bouncer-module path my-own-modules/${{ env.EXTENSION_PATH }}/
          ddev composer require ${{ env.EXTENSION_PACKAGE_NAME }}:@dev --no-interaction

      - name: Disable some extensions for 2.4
        if: startsWith(matrix.m2-version, '2.4')
        run: |
          ddev magento module:disable Magento_TwoFactorAuth
          ddev magento module:disable Magento_AdminNotification

      - name: Make some workaround for 2.3.5
        if: startsWith(matrix.m2-version, '2.3.5')
        run: |
          ddev magento  module:disable Dotdigitalgroup_Chat
          ddev magento  module:disable Dotdigitalgroup_Email

      - name: Enable extension
        run: |
          ddev magento deploy:mode:set developer
          ddev magento module:enable ${{ env.EXTENSION_NAME }}
          ddev magento setup:upgrade
          ddev magento setup:static-content:deploy -f
          ddev crowdsec-config
          ddev magento cache:flush

      - name: Prepare for playwright test
        run: |
          ddev magento setup:performance:generate-fixtures ./varnish-profile.xml
          ddev magento cache:flush
          cp .ddev/custom_scripts/cronLaunch.php ${{ github.workspace }}/pub/cronLaunch.php
          cp ${{ github.workspace }}/my-own-modules/${{ env.EXTENSION_PATH }}/crowdsec-prepend.php.example ${{ github.workspace }}/app/etc/crowdsec-prepend.php
          cd ${{ github.workspace }}/my-own-modules/${{ env.EXTENSION_PATH }}/Test/EndToEnd/__scripts__
          chmod +x test-init.sh
          ./test-init.sh
          chmod +x run-tests.sh

      - name: Run config test
        run: |
          cd ${{ github.workspace }}/my-own-modules/${{ env.EXTENSION_PATH }}/Test/EndToEnd/__scripts__
          ./run-tests.sh ci "./__tests__/1-config.js"

      - name: Run live mode test
        run: |
          cd ${{ github.workspace }}/my-own-modules/${{ env.EXTENSION_PATH }}/Test/EndToEnd/__scripts__
          ./run-tests.sh ci "./__tests__/2-live-mode.js"

      - name: Run stream mode test
        run: |
          cd ${{ github.workspace }}/my-own-modules/${{ env.EXTENSION_PATH }}/Test/EndToEnd/__scripts__
          ./run-tests.sh ci "./__tests__/3-stream-mode.js"

      - name: Run cron test
        run: |
          cd ${{ github.workspace }}/my-own-modules/${{ env.EXTENSION_PATH }}/Test/EndToEnd/__scripts__
          ./run-tests.sh ci "./__tests__/4-cron.js"

      - name: Run api test
        run: |
          cd ${{ github.workspace }}/my-own-modules/${{ env.EXTENSION_PATH }}/Test/EndToEnd/__scripts__
          ./run-tests.sh ci "./__tests__/5-api.js"

      - name: Run events logging test
        run: |
          ddev magento config:set admin/captcha/enable 0
          cd ${{ github.workspace }}/my-own-modules/${{ env.EXTENSION_PATH }}/Test/EndToEnd/__scripts__
          ./run-tests.sh ci "./__tests__/6-events.js"

      - name: Prepare auto-prepend-file mode test suite
        run: |
          cd ${{ github.workspace }}/.ddev
          ddev nginx-config custom_files/crowdsec-prepend-nginx-site.conf
          ddev exec -s crowdsec cscli decisions delete --all

      - name: Verify auto_prepend_file directive
        run: |
          cd ${{ github.workspace }}
          cp .ddev/custom_files/phpinfo.php pub/phpinfo.php
          PREPENDVERIF=$(curl https://${{ env.M2_VERSION_CODE }}.ddev.site/phpinfo.php | grep -o -E "auto_prepend_file=(.*)php(.*)" | sed 's/<\/tr>//g; s/<\/td>//g;' | tr '\n' '#')
          if [[ $PREPENDVERIF == "auto_prepend_file=/var/www/html/app/etc/crowdsec-prepend.php#auto_prepend_file=/var/www/html/app/etc/crowdsec-prepend.php#" ]]
          then
              echo "AUTO PREPEND FILE OK"
          else
              echo "AUTO PREPEND FILE KO"
              echo $PREPENDVERIF
              exit 1
          fi


      - name: Run auto prepend mode test suite
        run: |
          cd ${{ github.workspace }}/my-own-modules/${{ env.EXTENSION_PATH }}/Test/EndToEnd/__scripts__
          ./run-tests.sh ci
