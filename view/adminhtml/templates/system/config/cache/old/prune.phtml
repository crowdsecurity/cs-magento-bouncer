<?php
/**
 * CrowdSec_Bouncer Extension
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the MIT LICENSE
 * that is bundled with this package in the file LICENSE
 *
 * @category   CrowdSec
 * @package    CrowdSec_Bouncer
 * @copyright  Copyright (c)  2021+ CrowdSec
 * @author     CrowdSec team
 * @see        https://crowdsec.net CrowdSec Official Website
 * @license    MIT LICENSE
 *
 */

/**
 *
 * @category CrowdSec
 * @package  CrowdSec_Bouncer
 * @module   Bouncer
 * @author   CrowdSec team
 *
 */
/**
 *
 * @phpcs:disable Magento2.Legacy.EscapeMethodsOnBlockClass
 *
 */

/** @var \CrowdSec\Bouncer\Block\Adminhtml\System\Config\Cache\Prune $block */
/** @var \Magento\Framework\View\Helper\SecureHtmlRenderer $secureRenderer */
?>

<?php
/** @var \CrowdSec\Bouncer\Block\Adminhtml\System\Config\Cache\Prune $block */
?>
<script>
    require(['prototype'], function(){

//<![CDATA[
        function pruneCache() {
            var pruneCacheMessage = $('cache_pruning_result');

            params = {};

            new Ajax.Request('<?= $block->escapeJs($block->escapeUrl($block->getAjaxUrl())) ?>', {
                parameters: params,
                onSuccess: function(response) {
                    var result = '<?= $block->escapeJs(
                        $block->escapeHtml(__('Error during CrowdSec Cache pruning.'))
                    )?>';
                    try {
                        if (response.responseText.isJSON()) {
                            response = response.responseText.evalJSON();
                            result = response.message;
                        }
                        if (response.pruned == 1) {
                            pruneCacheMessage.removeClassName('hidden')
                                .removeClassName('error').addClassName('success');
                        } else {
                            pruneCacheMessage.removeClassName('hidden').removeClassName('success')
                                .addClassName('error');
                        }
                    } catch (e) {
                        pruneCacheMessage.removeClassName('hidden').removeClassName('success')
                            .addClassName('error');
                    }
                    pruneCacheMessage.update(result);
                }
            });
        }

        window.pruneCache = pruneCache;
//]]>

    });
</script>

<div class="actions actions-prune-cache actions-crowdsec">
    <button onclick="javascript:pruneCache(); return false;" class="action-prune-cache" type="button" id="<?=
    $block->escapeHtmlAttr($block->getHtmlId()) ?>">
        <span><?= $block->escapeHtml($block->getButtonLabel()) ?></span>
    </button>
    <p class="hidden" id="cache_pruning_result"></p>
    <p class="note">
        <span><?= $block->escapeHtml(
            __('Cache pruning is the process whereby entries that have expired are removed from the cache.
        Unlike Redis and Memcached, File system cache has no auto-purge mechanism.')
        ) ?></span>
    </p>
</div>

